// Code generated by go-bindata.
// sources:
// data\click.png
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataClickPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x6a\x60\x60\x60\xcc\x60\x01\x0a\x30\xa8\xaf\xfc\xd1\x03\x14\xb0\xf6\x74\x71\x0c\xa9\xb8\xf5\xf6\xae\xa3\x17\xb3\xa1\x48\xc3\xc3\x05\xef\xb8\xae\x38\x57\x4c\x10\x2c\x4a\x29\x57\xae\x60\xe4\x0f\x5e\xe0\xfd\x94\x93\x67\x8a\x5d\x77\x62\x8e\x4a\xcf\xaf\x5a\xed\x95\x1b\x65\xeb\x66\x7d\xe2\x58\x2c\x56\xa7\xcf\x80\x1d\x64\x15\xd5\xff\xfb\x11\x72\x2d\x53\x7f\xed\x7c\xdb\x6f\xf1\x77\xa7\xb9\x18\xcd\xb5\xaf\xd3\xc8\x7d\x3d\xed\x58\xfa\xf1\x7b\xab\xa5\x1f\x2c\x53\x58\xd0\xc0\xc4\xd5\xd1\xc0\xf4\xef\x69\x43\xf9\xd6\x6b\xcf\x9f\x3c\x34\x79\xbe\xcc\x75\xe9\xe1\xcf\x8b\xa6\x7c\xda\x57\xf3\x35\xe8\xd7\xfa\x3c\xe5\x6f\x82\x81\x93\xa6\x77\x24\xcf\xeb\xfb\xbc\xe8\x9a\xc2\xdd\x69\xea\x2f\xee\xad\xde\xdc\x5a\x3f\x0d\xa2\x8f\x4b\xe3\xc1\xeb\xa7\x73\x7e\x6f\xf3\x39\xd8\xbc\x75\xbd\x1e\xff\xf7\xbf\xc7\x9f\xd5\x36\x97\x1c\x2f\xb1\xa9\x98\x90\x57\xbf\xfa\xbd\x52\x6e\xe2\xfc\x46\xa8\xc2\x84\xcf\x2e\xbb\x6a\xdb\x8f\xbd\xfd\xfe\x6e\xff\x8e\xec\x3b\x5b\x37\xfa\x7c\x30\xdd\xf9\xbf\xc8\xe8\xdc\xf9\x29\x72\xa7\xbb\xd9\xf8\x2f\x4d\xef\x7e\xf4\xa4\x62\xe7\x96\x37\x4a\x49\x51\xf6\x1e\xef\x1f\xa7\x44\x55\x66\xbb\xff\x3a\xe8\xfc\x79\xe6\xa7\x45\x11\x37\x0e\xd9\x31\xb3\x8a\x08\x30\xb2\x8a\x04\x38\x00\x95\x66\x56\x4a\xcd\x9a\xbe\xf4\xad\xf1\xf3\x3f\x77\xbf\x30\xbd\x7e\x77\xcb\xa3\xfb\xd3\xd4\x2d\xe2\x96\x13\xb7\xb5\x42\x15\x1d\x38\x6b\xe0\x91\xbe\x51\xe3\xe4\x0d\xc7\x2a\xf9\x74\x9e\x4b\xdb\x36\x34\x30\x29\x81\x7c\x7a\x62\x59\xdd\xcd\x82\x3b\x9d\x25\xbf\x5f\xdd\x32\xde\x24\xfc\x52\x90\x05\x68\x1e\xa3\x20\x10\x77\xa6\xdc\xfa\x67\x7b\xe9\x67\x68\xf8\x1c\x8f\xe5\xae\xf7\x1a\xe1\x1a\x38\x70\x04\x2c\x10\x7c\xe0\xbe\x1a\xb5\xfc\xd0\x57\xa5\x47\x0f\xe4\x3f\xff\x65\xb7\x54\x00\x7a\x71\x41\x03\xc7\x09\x9b\xf3\xfe\x5b\xaf\x1d\xfa\xfa\x4d\x30\x91\xfb\x37\x8f\x8b\x03\x23\xc8\x45\xff\xe7\xdf\xb5\x39\xbf\xf5\xda\x71\x90\xea\x0c\x84\x30\xeb\x93\xdf\x65\x82\x86\x95\xec\xb7\x0e\x71\x00\xb5\x82\x2c\xb4\x98\xe8\x06\x95\x12\x11\xf8\xee\xa1\x0c\x89\x1c\x89\x64\x89\xb3\xf1\x6f\x1d\x1c\xc0\xbe\x67\x11\x11\xc0\x74\x4a\xc2\x69\x3b\x86\x86\x3e\xb7\x19\xaa\x8b\x7d\xea\x40\x7c\x4f\x57\x3f\x97\x75\x4e\x09\x4d\x80\x00\x00\x00\xff\xff\x61\xbc\xa2\x30\x74\x02\x00\x00")

func dataClickPngBytes() ([]byte, error) {
	return bindataRead(
		_dataClickPng,
		"data/click.png",
	)
}

func dataClickPng() (*asset, error) {
	bytes, err := dataClickPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/click.png", size: 628, mode: os.FileMode(438), modTime: time.Unix(1536864866, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/click.png": dataClickPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"click.png": &bintree{dataClickPng, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

