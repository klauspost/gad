// Code generated by go-bindata.
// sources:
// data\click.png
// data\flower.png
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataClickPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x6a\x60\x60\x60\xcc\x60\x01\x0a\x30\xa8\xaf\xfc\xd1\x03\x14\xb0\xf6\x74\x71\x0c\xa9\xb8\xf5\xf6\xae\xa3\x17\xb3\xa1\x48\xc3\xc3\x05\xef\xb8\xae\x38\x57\x4c\x10\x2c\x4a\x29\x57\xae\x60\xe4\x0f\x5e\xe0\xfd\x94\x93\x67\x8a\x5d\x77\x62\x8e\x4a\xcf\xaf\x5a\xed\x95\x1b\x65\xeb\x66\x7d\xe2\x58\x2c\x56\xa7\xcf\x80\x1d\x64\x15\xd5\xff\xfb\x11\x72\x2d\x53\x7f\xed\x7c\xdb\x6f\xf1\x77\xa7\xb9\x18\xcd\xb5\xaf\xd3\xc8\x7d\x3d\xed\x58\xfa\xf1\x7b\xab\xa5\x1f\x2c\x53\x58\xd0\xc0\xc4\xd5\xd1\xc0\xf4\xef\x69\x43\xf9\xd6\x6b\xcf\x9f\x3c\x34\x79\xbe\xcc\x75\xe9\xe1\xcf\x8b\xa6\x7c\xda\x57\xf3\x35\xe8\xd7\xfa\x3c\xe5\x6f\x82\x81\x93\xa6\x77\x24\xcf\xeb\xfb\xbc\xe8\x9a\xc2\xdd\x69\xea\x2f\xee\xad\xde\xdc\x5a\x3f\x0d\xa2\x8f\x4b\xe3\xc1\xeb\xa7\x73\x7e\x6f\xf3\x39\xd8\xbc\x75\xbd\x1e\xff\xf7\xbf\xc7\x9f\xd5\x36\x97\x1c\x2f\xb1\xa9\x98\x90\x57\xbf\xfa\xbd\x52\x6e\xe2\xfc\x46\xa8\xc2\x84\xcf\x2e\xbb\x6a\xdb\x8f\xbd\xfd\xfe\x6e\xff\x8e\xec\x3b\x5b\x37\xfa\x7c\x30\xdd\xf9\xbf\xc8\xe8\xdc\xf9\x29\x72\xa7\xbb\xd9\xf8\x2f\x4d\xef\x7e\xf4\xa4\x62\xe7\x96\x37\x4a\x49\x51\xf6\x1e\xef\x1f\xa7\x44\x55\x66\xbb\xff\x3a\xe8\xfc\x79\xe6\xa7\x45\x11\x37\x0e\xd9\x31\xb3\x8a\x08\x30\xb2\x8a\x04\x38\x00\x95\x66\x56\x4a\xcd\x9a\xbe\xf4\xad\xf1\xf3\x3f\x77\xbf\x30\xbd\x7e\x77\xcb\xa3\xfb\xd3\xd4\x2d\xe2\x96\x13\xb7\xb5\x42\x15\x1d\x38\x6b\xe0\x91\xbe\x51\xe3\xe4\x0d\xc7\x2a\xf9\x74\x9e\x4b\xdb\x36\x34\x30\x29\x81\x7c\x7a\x62\x59\xdd\xcd\x82\x3b\x9d\x25\xbf\x5f\xdd\x32\xde\x24\xfc\x52\x90\x05\x68\x1e\xa3\x20\x10\x77\xa6\xdc\xfa\x67\x7b\xe9\x67\x68\xf8\x1c\x8f\xe5\xae\xf7\x1a\xe1\x1a\x38\x70\x04\x2c\x10\x7c\xe0\xbe\x1a\xb5\xfc\xd0\x57\xa5\x47\x0f\xe4\x3f\xff\x65\xb7\x54\x00\x7a\x71\x41\x03\xc7\x09\x9b\xf3\xfe\x5b\xaf\x1d\xfa\xfa\x4d\x30\x91\xfb\x37\x8f\x8b\x03\x23\xc8\x45\xff\xe7\xdf\xb5\x39\xbf\xf5\xda\x71\x90\xea\x0c\x84\x30\xeb\x93\xdf\x65\x82\x86\x95\xec\xb7\x0e\x71\x00\xb5\x82\x2c\xb4\x98\xe8\x06\x95\x12\x11\xf8\xee\xa1\x0c\x89\x1c\x89\x64\x89\xb3\xf1\x6f\x1d\x1c\xc0\xbe\x67\x11\x11\xc0\x74\x4a\xc2\x69\x3b\x86\x86\x3e\xb7\x19\xaa\x8b\x7d\xea\x40\x7c\x4f\x57\x3f\x97\x75\x4e\x09\x4d\x80\x00\x00\x00\xff\xff\x61\xbc\xa2\x30\x74\x02\x00\x00")

func dataClickPngBytes() ([]byte, error) {
	return bindataRead(
		_dataClickPng,
		"data/click.png",
	)
}

func dataClickPng() (*asset, error) {
	bytes, err := dataClickPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/click.png", size: 628, mode: os.FileMode(438), modTime: time.Unix(1543177812, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataFlowerPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x8f\x09\x70\xf6\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x80\x00\x00\x00\x80\x08\x03\x00\x00\x00\xf4\xe0\x91\xf9\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xaf\xc8\x37\x05\x8a\xe9\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x41\x64\x6f\x62\x65\x20\x49\x6d\x61\x67\x65\x52\x65\x61\x64\x79\x71\xc9\x65\x3c\x00\x00\x00\xff\x50\x4c\x54\x45\x00\x00\x00\xff\xff\xff\x99\x99\x99\xfc\xfc\xfc\x66\x66\x66\xf9\xf9\xf9\x06\x06\x06\x1e\x1e\x1e\x03\x03\x03\xe7\xe7\xe7\x33\x33\x33\x09\x09\x09\x24\x24\x24\x0c\x0c\x0c\xcc\xcc\xcc\xf3\xf3\xf3\xe1\xe1\xe1\xa5\xa5\xa5\xdb\xdb\xdb\xed\xed\xed\xe4\xe4\xe4\x1b\x1b\x1b\x21\x21\x21\xae\xae\xae\x69\x69\x69\x15\x15\x15\x96\x96\x96\x87\x87\x87\x54\x54\x54\xea\xea\xea\x27\x27\x27\xf0\xf0\xf0\xc3\xc3\xc3\xa2\xa2\xa2\xc0\xc0\xc0\xf6\xf6\xf6\x7b\x7b\x7b\x18\x18\x18\xcf\xcf\xcf\x93\x93\x93\x6f\x6f\x6f\x5a\x5a\x5a\x2a\x2a\x2a\x2d\x2d\x2d\x0f\x0f\x0f\x6c\x6c\x6c\xab\xab\xab\x5d\x5d\x5d\xd5\xd5\xd5\xb4\xb4\xb4\x8a\x8a\x8a\x48\x48\x48\xde\xde\xde\x63\x63\x63\xd8\xd8\xd8\x72\x72\x72\x42\x42\x42\x78\x78\x78\xc6\xc6\xc6\xb7\xb7\xb7\xc9\xc9\xc9\xd2\xd2\xd2\xb1\xb1\xb1\x12\x12\x12\xbd\xbd\xbd\x9f\x9f\x9f\x51\x51\x51\x84\x84\x84\x75\x75\x75\x8d\x8d\x8d\x4e\x4e\x4e\x36\x36\x36\x57\x57\x57\x30\x30\x30\x4b\x4b\x4b\x81\x81\x81\x9c\x9c\x9c\x3f\x3f\x3f\x3c\x3c\x3c\x60\x60\x60\xba\xba\xba\x45\x45\x45\x90\x90\x90\xa8\xa8\xa8\x7e\x7e\x7e\x00\xe7\x97\xb6\x00\x00\x08\x16\x49\x44\x41\x54\x78\xda\xc4\x1b\xe9\x42\xf2\x30\x6c\x65\x03\x36\x6e\xb9\x51\x6e\xe4\x50\x6e\x54\x40\x41\x51\x54\xf4\xf3\xbe\xde\xff\x59\x3e\x06\x63\xb4\x5d\x3a\x8e\x55\xc9\x2f\x6d\xb6\x24\x6b\x73\x35\x09\x82\x60\x0d\xfa\x7d\x61\xb7\xe0\xf3\xed\x96\x7f\x12\xa1\xc7\x9d\x0a\xd0\x42\xa8\xb5\x4b\xfe\x9f\x68\x0a\x9f\x3b\x14\x20\xa6\x0a\x10\xdb\x1d\x7f\xa7\xa8\x0a\x20\x46\x76\x26\xc0\x39\x9a\xc1\xdd\x6f\xf2\x70\x44\x4d\x90\xd9\xb9\x00\x59\x93\x47\xa2\x96\x05\xf0\x4b\x2b\x4e\x60\x7a\x06\x45\xe6\x23\x71\xbf\xe5\x2d\x10\xd1\x80\x75\xc6\x71\xa4\x01\x4b\xc6\x68\x1e\x65\x2c\x0b\x90\x41\x28\xd3\x84\x51\x7b\x0b\x01\x72\x30\x5e\xf2\x23\xa4\x58\x16\xe0\x54\xe5\xd0\x70\x40\xa8\xf0\x42\x80\x00\x84\x75\xcf\x6c\x34\x68\x59\x80\xb9\xa2\x5d\x7b\x81\x0d\x46\x3a\x38\x8d\x58\x6f\x7e\x86\xf9\xb0\x2c\x40\x6e\xce\xc2\x97\x30\x60\x8e\x96\x02\x24\x0d\xc8\x62\x69\x8e\xb1\x59\x16\xe0\x56\xe3\xd1\x75\xb2\x30\x53\x78\x36\x18\x48\x50\xc3\x1c\xf2\x88\x77\xda\x41\x7b\x28\xcc\xd5\x52\x80\x06\x85\x3a\xd6\xd5\xe3\xc9\xb2\x00\x69\x9d\x4b\x90\x3a\x85\xe0\x52\x00\x2a\x22\x26\x4e\x75\x4c\xd1\xba\x2f\x0c\xe9\xc4\x2e\x08\x5b\x70\x88\x4b\x01\xec\xa4\xfe\x0f\x91\xa9\x7d\x6c\x13\xf1\xe6\xb0\xc7\x30\x02\xea\x43\xf7\x18\x6f\x6c\x09\x71\x8c\x0f\xae\x52\x6f\xb8\x00\x2e\x58\x39\x91\xc4\x23\xe6\xe2\x8c\x1e\x01\xed\x54\x61\xbc\x5c\x7f\xc4\xd7\x9d\x3c\x02\xe2\x25\x46\x30\xb3\x8c\x6e\x12\xce\xe8\x6c\x79\x32\x7e\x6c\x99\x4f\xc6\x7a\x88\x73\xca\xcb\x54\x32\x30\x87\xde\x62\x55\xbe\xc0\x97\xcf\xb9\x08\x90\xc6\x49\x2e\xb3\x8f\x0e\xbe\xfa\x0c\x4a\xcb\xe7\x04\xa6\xb9\x3f\x4e\xd3\x5e\xd5\x56\xf7\xf1\xd5\x7b\x6d\xd1\x65\xc7\x57\xb3\x9c\xb2\xa2\x33\xe2\xab\x2e\x1d\x80\x00\xfb\x9a\x07\xe8\x12\x8f\xbe\x73\x12\xc0\xeb\x27\xc8\x1e\x12\x51\x8a\x10\xe0\x80\x78\x30\xe4\xe6\x95\x18\x96\x09\xba\x76\x0f\xed\x6e\x16\x02\x78\x88\x03\x40\x1d\xce\xe9\xb7\x0e\x6d\x96\x00\x6d\x52\xd0\x22\x37\x01\x84\x1b\x82\xf2\x3c\xc4\x11\x6b\x65\x75\xe5\x89\x7c\xca\xc6\x8f\xbf\x70\x4c\x6e\xc1\xa5\x4c\x2b\xe1\x81\x1a\x9d\x82\xc4\x43\xe2\x86\x19\xf9\xb1\x3d\xec\xcb\xdb\x6c\xf1\x4f\x50\x73\x1a\xe4\xc7\xa9\x8e\xef\x9e\x16\x20\x4e\x3e\x03\xc6\x21\xf7\xe7\x9d\x2d\xef\x53\x16\x7a\x44\xc0\x9d\x6e\xbd\x9d\xc9\x88\x46\xba\x48\xe2\xa7\x0e\x32\xe6\xa8\x96\xe1\x08\x93\x1b\x70\x4c\xd3\x48\x4c\x3a\x43\x5c\x60\x1a\x08\x27\x7a\x21\x8d\x18\x29\xb8\x1e\xe5\x7a\xd4\xff\x15\xd3\x0d\x18\xd5\x71\xf2\x41\x2f\xe8\x72\x0b\x84\x0e\x37\x26\x32\x86\x8c\x10\x48\x14\x76\x08\xef\xf8\xff\x49\xc1\xab\x10\x0f\xf8\xf1\xdb\x8c\x3c\xb9\x22\x0c\x54\x7c\x83\xd5\x80\xfa\x06\x94\xea\x60\x49\x18\xe9\x63\x50\x5d\x98\xe0\xff\xf6\x97\x27\x68\x08\x43\x89\xfb\x10\x45\x98\x95\xa9\xca\x1f\xd4\x83\xa8\x50\xd6\xc3\x89\x97\x3c\xe2\x80\xfc\x80\xff\x5b\x75\x28\xf4\x0e\x2d\xc2\xb3\xad\x40\x53\xfd\x90\x59\x96\x50\x6b\xd1\xcf\x22\xf1\x26\x6d\xbc\x06\xcc\x52\x13\x22\x51\x19\x35\x49\xec\x91\xf6\x52\x35\x27\x1a\x48\x5e\xd6\xd8\xb6\xe8\x49\x21\xa3\x08\x65\xed\x85\x3c\xb1\x7c\x21\x63\xa4\x33\x42\x89\x40\x0e\xb4\x0f\xb2\x19\xc9\xa1\xb0\x69\x3d\xe3\x5f\x08\x78\x45\x99\x5f\x4e\x3d\x64\x4c\x7a\x0d\x2c\xff\x2e\xf5\x49\x0d\x9c\x1f\xdc\x3b\xf0\x39\x28\x55\x35\xf7\x47\x2e\x48\x02\x74\x3d\x33\xea\x1e\x69\x67\xd8\x8e\xc4\x62\x04\x2a\x3e\xdb\xfd\x2c\x44\x29\xf5\x6f\x95\x47\x74\x29\xd0\x7b\xf6\x03\x2f\x9d\x6e\xd9\x31\xa6\xe4\x49\xe7\x55\x9d\xbd\x17\x21\x3a\x4a\x75\xb5\x4f\xf6\x04\xa1\x37\x51\x60\x4c\x7b\x0a\x4c\x52\x62\xaf\xfd\xd3\x20\x90\x0c\x83\x44\x5a\x6b\xe5\x68\x89\x21\xf8\x32\x6a\x3b\xc9\x4c\x98\x05\x4d\x21\xfa\x01\x63\xf2\xa3\x35\xeb\x42\x2f\xf0\xfb\xa1\x27\xe1\x7b\x35\xff\x9c\x30\xc9\xc0\x98\xb2\x63\xfd\xdb\x50\x01\x26\x71\x50\x0c\xac\xe2\x1f\x1c\x7d\xc1\x08\x7f\x73\xa3\x54\xbc\x04\x53\xb9\x18\xdb\xcd\xf9\x17\x26\x3e\x18\x31\x4c\x6f\x58\x9e\xbb\x15\xe1\x63\x68\x98\x0b\xf0\x0d\x6f\xbf\x78\x28\x6f\x9c\x05\x3d\x9c\xc2\x2c\x4c\xb7\x00\x96\x1a\x75\x1f\xb6\xca\xc6\x3b\x76\xc4\x05\x0a\xb7\xdb\xe6\xe7\xe9\x01\x0f\xfe\x57\x1e\x0b\xd9\xe8\x24\x68\x95\x7d\xf7\xc4\x62\xad\xb8\x92\xb2\xc2\x5e\xa9\x3b\x2c\xa7\xe4\xee\x5e\x68\x5b\xf6\xa9\x0a\x9f\xcb\x99\xf7\x4e\xd9\xea\xeb\x7b\x5e\x6e\x17\x13\xb9\x39\xdc\x94\x7d\xf6\x51\xde\x9e\x9f\x2b\x29\x49\x52\xcf\x36\x87\xba\x74\xe6\x72\xd5\x84\x87\xdc\x06\x46\x69\xcf\xb9\x84\x9a\xcb\x25\x49\x75\x8d\x48\x65\x4a\x70\xec\x5a\xcd\xb9\x98\xec\xd9\xb2\xb0\xbb\xf7\x0d\x1a\x81\x75\xf9\x07\x1a\x03\xd8\x21\x9f\xe6\x6d\x95\x71\x82\xb5\xcd\x9f\x07\x25\xf4\x27\xe0\xbb\xed\x1b\x8e\x27\x52\x69\x17\xd0\x1f\x82\xff\xaa\x8e\x5f\xde\xfb\x31\xf4\xf7\x20\xc6\xb4\xbe\xb7\xfc\xde\x45\x3b\x82\xae\x9a\x22\x9c\xb4\xd0\x0e\xa1\x75\x22\xbc\xe6\x77\x29\xc0\xe0\x55\xb5\xfa\xd8\xae\xd8\x7f\x2f\x3c\x43\xfa\x46\xfc\x7b\xee\xf6\x1b\x3c\x49\x73\x1e\xfa\xfe\x96\xfd\xf0\xb0\x68\x74\x05\x31\xe5\x6f\x98\x2b\x8d\x3a\xeb\x82\xea\x79\xef\xb4\x19\xa9\x60\x69\x03\x57\x1c\xfc\x1e\x30\x9c\xea\x69\xbb\xd3\x5c\x9d\x20\xa5\x5d\x67\x92\x14\x9f\x47\x91\xaf\x69\x14\x99\x06\xa3\x88\x50\x7d\xd9\xc0\x55\xfa\xf7\x8f\x85\x88\x4b\x25\x23\x7d\xcd\xe9\xc4\x55\x32\x16\x72\xb3\xf1\xf5\xa6\xfb\x7c\x3d\xe6\x57\xa6\x74\x57\x02\xdb\x1c\x75\x80\x43\x3a\x36\xcb\x0a\xeb\x5b\xeb\x66\x38\x6e\x5d\x04\x47\x3c\x6c\x45\xe1\x03\x92\x6c\x8d\xbf\xf5\x48\xd1\x7a\xb5\xc0\x3e\xca\xc5\x49\x37\xb6\xed\x1c\xb9\x6f\x39\xe5\x28\x85\xc3\xad\xb2\xf3\xb7\xee\x46\xf7\x4f\x53\xe4\x65\x75\x73\xe5\xbb\x87\x49\x65\x72\x2b\xea\x23\x7e\x38\xf2\x6c\x3a\x47\x90\xbe\x64\xe4\x93\xfd\x8c\xb9\x00\xa1\x3e\xc3\x09\xe7\x37\xea\x5f\x34\x19\xa7\x5f\xf6\xae\x0c\x9a\x59\xb0\x3c\xaa\xba\xe7\xa3\xf5\xb7\xbf\xcc\x20\x91\x14\xca\xab\x55\xae\x23\x1c\xc1\xc7\x80\xee\xd7\xf4\x09\x23\x46\x92\x76\xed\x21\x3b\xe6\x2c\x78\x12\xd2\x59\x06\x85\xda\x5a\x3d\x3a\x58\xfb\x95\xe9\x0e\x46\x09\x05\x48\x31\x0a\x95\x21\x27\xa3\x4c\x3c\xb5\x86\x35\x06\xef\x8e\x41\xcf\x2f\x7e\xd5\xf4\x99\xa2\x85\x62\x63\x43\x2c\x7b\x84\xf9\xa9\xb3\x43\xb5\x7d\xd8\x35\x1f\xaf\x2c\xd4\x82\xae\x7f\x38\x2b\x31\xd7\x49\x07\x87\x9d\x54\xa3\x6d\x68\xaa\x09\x2e\x50\x5f\xc3\x2b\xf6\xa0\x08\x95\x64\x42\xf3\x41\x0c\xa7\x49\xb9\xfe\x84\x7c\x61\xce\xa5\x0e\x99\x6c\x30\x61\xc6\xbf\x06\x99\xff\x8b\x56\xe1\x25\x2b\x56\x25\x19\xbb\xae\x87\x04\x32\x68\x69\x53\x9e\x09\xc8\x6b\xf9\x4c\x34\xd1\x7d\x61\x7c\x7e\xcf\x05\xb7\x6c\x9a\x11\xa2\x65\x43\x95\xb1\x27\x8b\x4a\x03\x10\xce\xae\x99\x91\x41\xbe\x32\x78\xd0\x17\x3d\x77\x77\x93\xca\xa1\x38\xc8\xa6\x95\x9b\x6a\x5a\xe9\xd5\x19\xe0\xce\x71\xb5\xd6\xb0\x88\xea\xf7\xcb\x98\xc6\x9c\x93\xb8\x9e\x70\x42\xb6\xed\x28\x3c\xd6\x1a\x8d\x96\x69\x5d\x60\x0c\xa1\xbe\x51\x4d\xfa\x24\xbe\x55\x11\x52\x03\x15\xaf\xd0\xa4\x1a\x97\x21\x76\xe3\xd2\x7d\x44\x35\xf6\xc1\xca\xad\x17\xcf\x3c\x4b\xbd\x84\x69\xeb\xb6\x42\xb5\x39\x25\x81\xee\x5c\xde\x50\xe6\x75\x87\xeb\x77\x10\xca\x15\xf5\x32\x7f\x2a\x26\x19\x72\x98\x2a\x32\xf4\x25\x9f\xf1\x85\x73\x81\xee\xdd\x1a\x9b\xd7\xd1\x78\x4c\xdf\xa5\x1f\xa0\x61\x27\xda\x7d\xbe\x9c\xed\x39\x09\x26\x50\xd4\x06\xd4\xa1\xf6\x7d\xc5\x74\x0b\x34\x21\x92\xb7\x2f\xbe\x53\x04\xb6\xef\x4d\xfd\x23\xa9\x1e\xb3\x1d\x5c\x35\xc0\x60\xe7\x34\x44\x34\x83\x17\x3a\xde\xad\x33\xc2\x51\xe6\xc7\x3f\x42\xd6\x28\xd7\x1c\x62\x29\xf0\x1b\x62\x21\xf3\x43\x68\x8c\xc7\x06\x8d\xf1\x1c\x70\xbb\x1b\x86\x20\xba\x39\xe3\x0e\xfc\xd6\x20\x13\x99\x07\x75\xdd\xec\x51\x2e\x2f\x59\x5c\x38\xe2\x24\xc0\x15\xe8\xc5\xc0\x61\xb6\x57\x32\xec\xf0\xe1\x9f\x20\x6c\xf0\xc7\x7c\x9c\x8f\xcc\x5a\xf9\x58\x22\xe1\x60\x86\x2b\x06\x1a\xdd\x2d\x70\x99\xdb\x38\xa1\x7f\xe9\xc1\xe2\x86\x24\x4c\x1b\x88\xc2\xc5\xe5\x32\xc9\x06\x33\x22\x87\x57\xb1\x7a\x0c\x91\x9a\x24\x38\x08\x10\x37\x2a\xfb\x3c\x7a\xe3\x8c\x1e\x18\x6e\x93\x87\x1d\x60\x0e\x27\x8b\x47\x51\x0f\x2e\x00\xee\xf4\x1c\x58\x62\xc7\x63\xb0\x59\x61\x24\xb4\xec\xd1\xee\xc4\x32\x2a\x05\x78\xaa\x40\x98\x32\x2a\xcc\xe9\x74\x99\xd3\x40\xd6\x95\x60\xac\xe7\x29\x55\xb6\x7f\x8a\x31\x67\x71\x4e\x2c\x0b\xf0\xb3\xe0\x6f\x98\xbf\x39\x00\xfc\x90\x61\x1e\xc9\xfa\x68\xb3\x16\x73\x14\xe3\xa5\x0e\xcb\x4a\x8d\x3f\xf9\xfb\xa7\xe0\x61\xd2\x0a\xcc\x2f\xa4\x97\x80\x53\xf5\x98\xba\x5c\x67\x4b\xbf\xa8\x5a\x83\x99\xaa\x0d\xbc\xa6\xf6\x01\xea\xfa\x68\x56\x5e\xb6\xfe\x33\x9f\xe9\xa5\x42\xfc\x81\x51\xdf\xe6\xd6\x2e\x3f\x8b\x3c\x7e\xe8\x64\x47\x81\xb7\x55\x3e\x32\xce\x78\xa0\x1f\xb6\xfe\x53\x2f\xc7\x6c\x8a\xcc\xdc\x45\x88\x4e\xf6\x18\x8a\x68\x59\x00\xb3\x92\x86\xd6\xd3\xcf\x9a\x3c\x52\x15\x7e\x13\xce\x79\xd9\xfa\xd6\xc5\x6c\xd1\xfc\x04\x7e\x1f\xda\xa6\xd7\xfd\x3f\x80\x13\x3e\xee\xde\xc2\x6c\xc9\x34\xf0\x76\xe5\x1d\x0a\xa0\x16\x8e\x8e\x76\xc9\x5f\x90\x4b\xa5\x9d\x6e\xc0\x54\x0b\xac\x6a\xc0\x7f\x01\x06\x00\x1b\xbb\xaa\xde\xe6\x57\x2a\xf1\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xc8\x55\xfc\xfc\x8f\x09\x00\x00")

func dataFlowerPngBytes() ([]byte, error) {
	return bindataRead(
		_dataFlowerPng,
		"data/flower.png",
	)
}

func dataFlowerPng() (*asset, error) {
	bytes, err := dataFlowerPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/flower.png", size: 2447, mode: os.FileMode(438), modTime: time.Unix(1531675836, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/click.png": dataClickPng,
	"data/flower.png": dataFlowerPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"click.png": &bintree{dataClickPng, map[string]*bintree{
		}},
		"flower.png": &bintree{dataFlowerPng, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

